generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  name       String
  password   String?
  role       UserRole   @default(CUSTOMER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  status     UserStatus @default(INACTIVE)
  bookings   Booking[]
  businesses Business[]

  @@map("users")
}

model Business {
  id          String         @id @default(cuid())
  name        String
  description String?
  logo        String?
  coverImage  String?
  address     String
  city        String
  state       String
  zipCode     String
  phone       String
  email       String
  website     String?
  categoryId  String
  ownerId     String
  isActive    Boolean        @default(true)
  rating      Float          @default(0)
  reviewCount Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isFeatured  Boolean        @default(false)
  status      BusinessStatus @default(HIDDEN)
  bookings    Booking[]
  category    Category       @relation(fields: [categoryId], references: [id])
  owner       User           @relation(fields: [ownerId], references: [id])
  services    Service[]

  @@index([categoryId], map: "businesses_categoryId_fkey")
  @@index([ownerId], map: "businesses_ownerId_fkey")
  @@map("businesses")
}

model Service {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Decimal
  duration    Int
  businessId  String
  categoryId  String
  image       String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      ServiceStatus @default(HIDDEN)
  bookings    Booking[]
  business    Business      @relation(fields: [businessId], references: [id])

  @@index([businessId], map: "services_businessId_fkey")
  @@map("services")
}

model Booking {
  id         String        @id @default(cuid())
  date       DateTime
  time       String
  status     BookingStatus @default(PENDING)
  notes      String?
  userId     String
  businessId String
  serviceId  String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  business   Business      @relation(fields: [businessId], references: [id])
  service    Service       @relation(fields: [serviceId], references: [id])
  user       User          @relation(fields: [userId], references: [id])

  @@index([businessId], map: "bookings_businessId_fkey")
  @@index([serviceId], map: "bookings_serviceId_fkey")
  @@index([userId], map: "bookings_userId_fkey")
  @@map("bookings")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String
  icon        String
  color       String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  businesses  Business[]

  @@map("categories")
}

model Promo {
  id                 String    @id @default(cuid())
  title              String
  description        String
  discountPercentage Int
  businessId         String
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isFeatured         Boolean   @default(false)
  isPromoted         Boolean   @default(false)
  promoDescription   String?
  promoEndDate       DateTime?
  promoImage         String?
  promoPrice         Decimal?
  promoStartDate     DateTime?

  @@map("promos")
}

model AdminUser {
  id               String          @id @default(cuid())
  email            String          @unique
  name             String
  password         String
  role             AdminRole       @default(SUPER_ADMIN)
  twoFactorEnabled Boolean         @default(false)
  twoFactorSecret  String?
  lastLoginAt      DateTime?
  loginAttempts    Int             @default(0)
  lockedUntil      DateTime?
  permissions      String
  department       String?
  employeeId       String?         @unique
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  createdBy        String?
  updatedBy        String?
  auditLogs        AdminAuditLog[]
  sessions         AdminSession[]

  @@map("admin_users")
}

model AdminAuditLog {
  id         String    @id @default(cuid())
  adminId    String
  action     String
  resource   String
  resourceId String?
  details    String?   @db.LongText
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime  @default(now())
  admin      AdminUser @relation(fields: [adminId], references: [id])

  @@index([adminId], map: "admin_audit_logs_adminId_fkey")
  @@map("admin_audit_logs")
}

model AdminSession {
  id        String    @id @default(cuid())
  adminId   String
  token     String    @unique
  expiresAt DateTime
  isActive  Boolean   @default(true)
  ipAddress String?
  userAgent String?
  createdAt DateTime  @default(now())
  admin     AdminUser @relation(fields: [adminId], references: [id])

  @@index([adminId], map: "admin_sessions_adminId_fkey")
  @@map("admin_sessions")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  BUSINESS_OWNER
  CUSTOMER
}

enum BusinessStatus {
  HIDDEN
  PUBLISHED
}

enum ServiceStatus {
  HIDDEN
  PUBLISHED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum AdminRole {
  SUPER_ADMIN
  MODERATOR
  SUPPORT
}
